"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

from time import time


def timer(f):
    def tmp(*args, **kwargs):
        t = time()
        res = f(*args, **kwargs)
        print(time()-t)
        print()
        return res

    return tmp

##################################################################################


my_list = [i for i in range(10100000)]  # O(n)
my_dict = {d: d for d in range(10100000)}  # O(n)


@timer
def do_list():
    print("Время выполнения do_list: ")
    return [i for i in range(10100000)]  # O(n)


do_list()


@timer
def do_dict():
    print("Время выполнения do_dict: ")
    return {d: d for d in range(10100000)}  # O(n)


do_dict()

# список заполняется быстрей, т.к. при заполнении словаря происходит дополнительная операция хеширования ключа

##############################################################################################################


@timer
def search_list():
    print("Время выполнения search_list: ")
    return [i for i in my_list if i == 100000]  # O(n)


search_list()


@timer
def search_dict():
    print("Время выполнения search_dict: ")
    return {a: a for a in my_dict if a == 100000}  # O(n)


search_dict()

# элемент в списке ищется немного быстрей, чем поиск значения по ключу словаря,
# т.к. мы пишем ключ, он конвертируется в хеш, и по нему ищем значение + доп операция

#############################################################################################################


@timer
def del_list():
    print("Время выполнения del_list: ")
    return my_list.pop(100000)  # O(n)


del_list()


@timer
def del_dict():
    print("Время выполнения del_dict: ")
    return my_dict.pop(100000)  # O(1)


del_dict()

# удаление из словаря происходит гораздо быстрей, чем у списка,т.к. обращение к ключу происходит по хэшу
